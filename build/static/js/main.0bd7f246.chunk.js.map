{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","model","wrap","_context","prev","next","loadModel","sent","initCanvas","initWebcam","stop","_ref2","_callee2","video","_context2","document","getElementById","streamVideo","_x","apply","arguments","_callee3","_context3","cocoSsd","abrupt","predictObject","_ref4","_callee4","image","_context4","detect","then","predictions","console","log","drawRectangle","myReq","requestAnimationFrame","setState","req","_x2","_x3","stopWebcam","state","track","stopModel","cancelAnimationFrame","canvas","context","getContext","_this2","navigator","mediaDevices","getUserMedia","facingMode","mediaStream","srcObject","onloadedmetadata","getTracks","catch","error","message","prediction","clearRect","i","length","coordinates","getCoordinates","objectName","getObjectName","beginPath","fillText","rect","stroke","prediciton","class","bbox","react_default","createElement","className","id","width","height","autoPlay","muted","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0bd7f246.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport '@tensorflow/tfjs';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      model: null,\n      track: null,\n      req: null,\n      canvas: null,\n    }\n\n  }\n\n  componentDidMount = async () => {\n    const model = await this.loadModel();\n    this.initCanvas();\n    this.initWebcam(model);\n  }\n\n  /**\n   * Function to init the webcam and stream to the video tag\n   */\n  initWebcam = async (model) => {\n    const video = document.getElementById(\"webcam\");\n    this.streamVideo(video, model);\n  }\n\n  /**\n   * Function to init the canvas \n   */\n  initCanvas() {\n    const canvas = document.getElementById(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n\n    this.setState({\n      context: context\n    });\n  }\n\n  /**\n   * Function to stream the video to the model\n   * @param {*} video - The video to be streamed\n   * @param {*} model - The loaded deep learning model, which is used to predict the objects \n   */\n  streamVideo(video, model) {\n    const constrains = { video: { facingMode: 'user' } };\n\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia(constrains)\n        .then(mediaStream => {\n\n          video.srcObject = mediaStream;\n\n          video.onloadedmetadata = () => {\n            this.predictObject(video, model);\n          }\n\n          const track = mediaStream.getTracks()[0];\n          this.setState({ track: track });\n        })\n        .catch(error => {\n          console.log(error.message);\n        })\n    }\n  }\n\n\n  /**\n   * Function thats draws a rectangle around the detected object\n   * @param {*} prediciton \n   */\n  drawRectangle(prediction) {\n    const context = this.state.context;\n    context.clearRect(0, 0, 400, 400);\n    try {\n\n      for (let i = 0; i < prediction.length; i++) {\n        const coordinates = this.getCoordinates(prediction[i]);\n        const objectName = this.getObjectName(prediction[i]);\n\n        context.beginPath();\n        context.fillText(objectName, coordinates[0], coordinates[1] - 10);\n        context.rect(coordinates[0], coordinates[1], coordinates[2], coordinates[3]);\n        context.stroke();\n\n      }\n    } catch (error) {\n      console.log(error);\n\n    }\n  }\n\n  /**\n   * Function to get the name of the object that is predicted\n   * @param {*} prediciton \n   */\n  getObjectName(prediciton) {\n    try {\n      return prediciton.class;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Function to get coordinates for the object that is predicted \n   * @param {*} prediciton \n   */\n  getCoordinates(prediciton) {\n    try {\n      return prediciton.bbox;\n    }\n    catch (error) {\n      console.log(error);\n    }\n\n\n  }\n\n  /**\n   * Function to load the model\n   */\n  loadModel = async () => {\n    return await cocoSsd.load();\n  }\n\n  /**\n   * Function to predict what object the model sees in the image\n   */\n  predictObject = async (image, model) => {\n    model.detect(image).then(predictions => {\n      console.log((predictions))\n      this.drawRectangle(predictions);\n\n      const myReq = requestAnimationFrame(() => {\n        this.predictObject(image, model)\n      })\n\n      this.setState({ req: myReq })\n    })\n  }\n\n  /**\n   * Function to stop webcam\n   */\n  stopWebcam = () => {\n    this.state.track.stop();\n  }\n\n  /**\n   * Function to stop the model from predicting\n   */\n  stopModel = () => {\n    cancelAnimationFrame(this.state.req);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"video-container\">\n          <canvas id=\"canvas\" width=\"400\" height=\"400\" />\n          <video autoPlay muted width=\"400\" height=\"400\" id=\"webcam\" />\n        </div>\n        <button id=\"btnStop\" onClick={this.stopWebcam}>Stop Camera</button>\n        <button id=\"btnStopModel\" onClick={this.stopModel}>Stop Model</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}